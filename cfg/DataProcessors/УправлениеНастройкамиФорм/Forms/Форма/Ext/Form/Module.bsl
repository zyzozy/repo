//////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// Процедура заполняет список пользователей информационной базы
&НаСервере
Процедура ЗаполнитьСписокПользователей()
	
	СписокПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Если СписокПользователей.Количество() > 0 Тогда
	
		Для каждого ТекПользователь Из СписокПользователей Цикл
			
			Элементы.Пользователь.СписокВыбора.Добавить(ТекПользователь.Имя);
			
		КонецЦикла;
		
	Иначе
		
		Элементы.Пользователь.Доступность = Ложь;
		Элементы.Скопировать.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоНастройкиПоУмолчанию()
	Возврат Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаНастройкиПоУмолчанию;
КонецФункции

Функция ПолучитьПользователя()
	Возврат ?(ЭтоНастройкиПоУмолчанию(), Неопределено, Пользователь);
КонецФункции

Функция ПолучитьВыделенныеСтроки()
	Возврат ?(ЭтоНастройкиПоУмолчанию(), Элементы.ОтфильтрованныеНастройкиПоУмолчанию, Элементы.ОтфильтрованныеФормы).ВыделенныеСтроки;
КонецФункции

// Процедура обновляет список сохраненных настроек форм
&НаСервере
Процедура ОбновитьСписокФорм()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Формы.Очистить();
	Обработка.ПолучитьСписокСохраненныхНастроек(ПолучитьПользователя(), Формы);
	
КонецПроцедуры

// Функция получает выделенные настройки в массиве
//
// Возврат :
//  Массив имен настроек форм
&НаСервере
Функция ПолучитьМассивВыделенныхНастроек()
	
	МассивНастроек = Новый Массив;
	
	ВыделенныеЭлементы = ПолучитьВыделенныеСтроки();
	
	Для каждого ВыделенныйЭлемент Из ВыделенныеЭлементы Цикл
		
		МассивНастроек.Добавить(Формы.НайтиПоЗначению(ОтфильтрованныеФормы.НайтиПоИдентификатору(ВыделенныйЭлемент).Значение).Значение);
		
	КонецЦикла;
	
	Возврат МассивНастроек;
	
КонецФункции

// Процедура удаляет выделенные настройки
&НаСервере
Процедура УдалитьНаСервере()
	
	МассивНастроекДляУдаления = ПолучитьМассивВыделенныхНастроек();

	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.УдалитьНастройкиФорм(ПолучитьПользователя(), МассивНастроекДляУдаления);
	
КонецПроцедуры

// Процедура применяет фильтр к списку настроек
&НаСервере
Процедура ПрименитьФильтр()
	
	ОтфильтрованныеФормы.Очистить();
	
	Для каждого ЭлементФорма Из Формы Цикл
		
		Если ЗначениеПоиска = "" ИЛИ Найти(ВРег(ЭлементФорма.Представление), ВРег(ЗначениеПоиска)) <> 0 Тогда
			
			ОтфильтрованныеФормы.Добавить(ЭлементФорма.Значение, ЭлементФорма.Представление, ЭлементФорма.Пометка, ЭлементФорма.Картинка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПримененныйПоиск = ЗначениеПоиска;
	
КонецПроцедуры

// Процедура копирует выделенные настройки указанному пользователю
// Параметры :
//  ПользователиПриемник - имя пользователя, которому нужно скопировать настройки
&НаСервере
Процедура СкопироватьНаСервере(ПользователиПриемник)

	МассивНастроекДляКопирования = ПолучитьМассивВыделенныхНастроек();
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.СкопироватьНастройкиФорм(ПолучитьПользователя(), ПользователиПриемник, МассивНастроекДляКопирования);
		
КонецПроцедуры

// Процедура сохраняет выделенные настройки в качестве настроек по умолчанию
&НаСервере
Процедура СохранитьПоУмолчаниюНаСервере()

	МассивНастроек = ПолучитьМассивВыделенныхНастроек();
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.СохранитьПоУмолчанию(ПолучитьПользователя(), МассивНастроек);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
// Обработчики команд

// Обработчик команды Обновить
&НаКлиенте
Процедура ОбновитьВыполнить()
	
	ОбновитьСписокФорм();
	ПрименитьФильтр();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВыполнить(Команда)
	ВыполнитьКопирование();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВыполнитьКопирование()
	Если Элементы.ОтфильтрованныеФормы.ВыделенныеСтроки.Количество() = 0 Тогда
		Ждать ПредупреждениеАсинх(
			НСтр("ru = 'Для копирования нужно выбрать настройки, которые требуется скопировать.'"));
		Возврат;
	КонецЕсли;
	СписокВыбораПользователей = Элементы.Пользователь.СписокВыбора.Скопировать();
	СписокВыбораПользователей.Удалить(СписокВыбораПользователей.НайтиПоЗначению(Пользователь));
	РезультатОтметкиПользователя = Ждать СписокВыбораПользователей.ОтметитьЭлементыАсинх(НСтр("ru = 'Отметьте пользователей, которым нужно скопировать настройки.'"));
	Если РезультатОтметкиПользователя <> Неопределено Тогда
		ПользователиПриемник = Новый Массив;
		Для каждого Элемент Из СписокВыбораПользователей Цикл
			Элементы.Пользователь.СписокВыбора.НайтиПоЗначению(Элемент.Значение).Пометка = Элемент.Пометка;
			Если Элемент.Пометка Тогда
				ПользователиПриемник.Добавить(Элемент.Значение);
			КонецЕсли;
		КонецЦикла;
		Если ПользователиПриемник.Количество() = 0 Тогда
			Ждать ПредупреждениеАсинх(НСтр("ru = 'Для копирования нужно отметить пользователей, которым требуется скопировать настройки.'"));
			Возврат;
		КонецЕсли;
		Действие = "ВыполнитьКопирование";
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(Действие, НСтр("ru = 'Выполнить копирование'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		Контекст = Новый Структура("Действие, ПользователиПриемник", Действие, ПользователиПриемник);
		РезультатОтветаНаВопрос = Ждать ВопросАсинх(
			НСтр("ru='После копирования настроек пользователю формы у пользователя будут открываться с настройками, которые ему скопируются. При этом его собственные настройки будут потеряны.'"),
			СписокКнопок, , Действие);
		Если РезультатОтветаНаВопрос = Контекст.Действие Тогда
			СкопироватьНаСервере(Контекст.ПользователиПриемник);
			ПоказатьОповещениеПользователя(НСтр("ru = 'Настройки скопированы'"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыполнить(Команда)
	ВыполнитьУдаление();
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВыполнитьУдаление()
	Если ПолучитьВыделенныеСтроки().Количество() = 0 Тогда
		Ждать ПредупреждениеАсинх(
			НСтр("ru='Для удаления нужно выбрать настройки, которые требуется удалить.'"));
		Возврат;
	КонецЕсли;
	Действие = "ВыполнитьУдаление";
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(Действие, НСтр("ru = 'Выполнить удаление'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	РезультатВопросаОбУдалении = Ждать ВопросАсинх(
		?(ЭтоНастройкиПоУмолчанию(),
		  НСтр("ru='После удаления настроек формы будут открываться без настроек.'"),
		  НСтр("ru='После удаления настроек формы будут открываться с настройками по умолчанию.'")),
		СписокКнопок, , Действие);
	Если РезультатВопросаОбУдалении = Действие Тогда
		УдалитьНаСервере();
		ОбновитьСписокФорм();
		ПрименитьФильтр();
		ПоказатьОповещениеПользователя(НСтр("ru='Настройки удалены'"));
	КонецЕсли;
КонецПроцедуры

// Обработчик команды ПоУмолчанию
&НаКлиенте
Процедура СохранитьПоУмолчаниюВыполнить(Команда)
	СохранитьПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Асинх Процедура СохранитьПоУмолчанию()
	Если Элементы.ОтфильтрованныеФормы.ВыделенныеСтроки.Количество() = 0 Тогда
		Ждать ПредупреждениеАсинх(
			НСтр("ru = 'Нужно выбрать настройки, которые требуется установить в качестве настроек по умолчанию.'"));
		Возврат;
	КонецЕсли;
	Действие = "СохранитьПоУмолчанию";
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(Действие, НСтр("ru = 'Сохранить'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	РезультатВопроса = Ждать ВопросАсинх(
		НСтр("ru='После сохранения настроек по умолчанию, формы будут открываться с выбранными настройками у пользователей, не имеющих собственных настроек этих форм. Сохранить в качестве настроек по умолчанию?'"),
		СписокКнопок, , Действие);
	Если РезультатВопроса = Действие Тогда
		СохранитьПоУмолчаниюНаСервере();
		ОбновитьСписокФорм();
		ПрименитьФильтр();
		ПоказатьОповещениеПользователя(НСтр("ru='Настройки установлены в качестве настроек по умолчанию.'"));
	КонецЕсли;
КонецПроцедуры

// Обработчик команды поиска
&НаКлиенте
Процедура ИскатьВыполнить()
	
	ПрименитьФильтр();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
// Обработчики событий формы

// Обработчик события создания формы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписокПользователей();
	Пользователь = ИмяПользователя();
	НастройкиПоУмолчанию = Ложь;
	ОбновитьСписокФорм();
	ПрименитьФильтр();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
// Обработчики событий элементов управления

// Обработчик изменения имени пользователя
&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	ОбновитьСписокФорм();
	ПрименитьФильтр();
	
КонецПроцедуры

// Обработчик изменения строки поиска
&НаКлиенте
Процедура ПоискПриИзменении(Элемент)
	
	ПрименитьФильтр();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ОбновитьСписокФорм();
	ПрименитьФильтр();
КонецПроцедуры

